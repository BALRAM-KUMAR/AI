from sqlalchemy import create_engine, Column, Integer, String, DateTime, ForeignKey, JSON, Boolean
from sqlalchemy.orm import relationship, sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

# 1. Agent Model
class Agent(Base):
    __tablename__ = 'agents'

    id = Column(Integer, primary_key=True, autoincrement=True)
    hostname = Column(String, nullable=False)
    username = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    images = relationship("Image", back_populates="agent")

# 2. Image Model
class Image(Base):
    __tablename__ = 'images'

    id = Column(Integer, primary_key=True, autoincrement=True)
    file_path = Column(String, nullable=False)
    agent_id = Column(Integer, ForeignKey('agents.id'), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    agent = relationship("Agent", back_populates="images")
    label_metadata = relationship("LabelMetadata", back_populates="image")
    predictions = relationship("Prediction", back_populates="image")

# 3. Label Model
class Label(Base):
    __tablename__ = 'labels'

    id = Column(Integer, primary_key=True, autoincrement=True)
    name = Column(String, unique=True, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    label_metadata = relationship("LabelMetadata", back_populates="label")

# 4. Label Metadata Model
class LabelMetadata(Base):
    __tablename__ = 'label_metadata'

    id = Column(Integer, primary_key=True, autoincrement=True)
    image_id = Column(Integer, ForeignKey('images.id'), nullable=False)
    label_id = Column(Integer, ForeignKey('labels.id'), nullable=False)
    bbox = Column(JSON, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    image = relationship("Image", back_populates="label_metadata")
    label = relationship("Label", back_populates="label_metadata")

# 5. Prediction Model
class Prediction(Base):
    __tablename__ = 'predictions'

    id = Column(Integer, primary_key=True, autoincrement=True)
    image_id = Column(Integer, ForeignKey('images.id'), nullable=False)
    bbox = Column(JSON, nullable=False)
    label = Column(String, nullable=False)
    confidence = Column(Integer, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)

    image = relationship("Image", back_populates="predictions")

# 6. Model Model
class Model(Base):
    __tablename__ = 'models'

    id = Column(Integer, primary_key=True, autoincrement=True)
    version = Column(String, unique=True, nullable=False)
    is_active = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)

# 7. Training Jobs Model
class TrainingJob(Base):
    __tablename__ = 'training_jobs'

    id = Column(Integer, primary_key=True, autoincrement=True)
    model_id = Column(Integer, ForeignKey('models.id'), nullable=False)
    status = Column(String, nullable=False)  # e.g., 'in_progress', 'completed', 'failed'
    metrics = Column(JSON, nullable=True)
    started_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)

    model = relationship("Model")

# Create database and tables
engine = create_engine('sqlite:///yolo_database.db')  # Use PostgreSQL or MySQL in production
Base.metadata.create_all(engine)

# Session setup
Session = sessionmaker(bind=engine)
session = Session()
